/**
 * This class was AUTO-GENERATED by react-native-codegen, and should not be
 * edited manually. If there is an error, make a change to
 * react-native-codegen. If you want to add another attribute, change the
 * `Props` declaration in "example/Settings.js".
 */

import React from "react-native";
import {ReactNativeCallbackManager} from "react-native-codegen";

import WrappedComponent from "./Settings.js";



type Props = {
    shouldShowLogOutButton: boolean
    availableDiskSpaceInBytes: number
    onlyDownloadOverWifi: boolean
    checkAnswer: number
    onSignOut: number
    onFeedbackNav: number
    onSetDownloadOverWifi: number
}

class SettingsWrapper extends React.Component {
    props: Props;

    constructor(props) {
        super(props);
        this.callbackIds = [];
    }
    registerCallback(cb: Function) {
        const id = ReactNativeCallbackManager.registerCallback(cb);
        this.callbackIds.push(id);
        return id;
    }
    componentWillUnmount() {
        ReactNativeCallbackManager.unregisterCallbacks(this.callbackIds);
    }
    render() {
        return (
            <WrappedComponent
                shouldShowLogOutButton={this.props.shouldShowLogOutButton}
                availableDiskSpaceInBytes={this.props.availableDiskSpaceInBytes}
                onlyDownloadOverWifi={this.props.onlyDownloadOverWifi}
                checkAnswer={(answer: string, cb: (isCorrect: boolean) => void) => {
                    ReactNativeCallbackManager.callNative(this.props.checkAnswer, {answer: answer, cb: this.registerCallback(({isCorrect}) => {
                        cb(isCorrect: isCorrect);
                    })});
                }}
                onSignOut={() => {
                    ReactNativeCallbackManager.callNative(this.props.onSignOut, {});
                }}
                onFeedbackNav={() => {
                    ReactNativeCallbackManager.callNative(this.props.onFeedbackNav, {});
                }}
                onSetDownloadOverWifi={(downloadOverWifi: boolean) => {
                    ReactNativeCallbackManager.callNative(this.props.onSetDownloadOverWifi, {downloadOverWifi: downloadOverWifi});
                }}
            />
        );
    }
}

export default SettingsWrapper