package org.khanacademy.android.ui.reactnative;

/**
 * This class was AUTO-GENERATED by react-native-codegen, and should not be
 * edited manually. If there is an error, make a change to
 * react-native-codegen. If you want to add another attribute, change the
 * `Props` declaration in "example/index.js".
 */



import static com.google.gson.internal.$Gson$Preconditions.checkNotNull;

import org.khanacademy.android.BuildConfig;
import org.khanacademy.codegen.ReactNativePropsManager;

import com.facebook.react.LifecycleState;
import com.facebook.react.ReactInstanceManager;
import com.facebook.react.ReactRootView;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.CatalystInstance;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.shell.MainReactPackage;
import com.facebook.react.uimanager.AppRegistry;

import android.app.Activity;
import android.os.Bundle;
import android.view.View;

final public class KitchenSink {
    public interface Fn0args {
        void call();
    }

    public interface Fn1args<A> {
        void call(A arg);
    }

    public interface Fn2args<A, B> {
        void call(A arg1, B arg2);
    }

    public interface Fn3args<A, B, C> {
        void call(A arg1, B arg2, C arg3);
    }

    public interface Fn4args<A, B, C, D> {
        void call(A arg1, B arg2, C arg3, D arg4);
    }

    private static final class KitchenSinkPropsManager extends ReactNativePropsManager {
        public Bundle createBundle(final com.example.core.models.User user, final com.example.core.models.Video currentVideo, final Fn2args<com.example.core.models.Video, Integer> setVideo, final Fn1args<Fn1args<com.example.core.models.Video>> getNextVideo, final Fn2args<com.example.core.models.User, Fn1args<com.example.core.models.Video>> getVideoForUser, final Fn0args onClose, final Fn1args<String> onError) {
            final Bundle bundle = new Bundle();
            bundle.putBundle("user", serializeUser(user));
            bundle.putBundle("currentVideo", serializeVideo(currentVideo));
            bundle.putInt("setVideo", registerCallback(argsBundle -> {
                setVideo.call(deserializeVideo(argsBundle.getBundle("video")), argsBundle.getInt("count"));
            }));
            bundle.putInt("getNextVideo", registerCallback(argsBundle -> {
                getNextVideo.call(IDK FUnCTION);
            }));
            bundle.putInt("getVideoForUser", registerCallback(argsBundle -> {
                getVideoForUser.call(deserializeUser(argsBundle.getBundle("user")), IDK FUnCTION);
            }));
            bundle.putInt("onClose", registerCallback(argsBundle -> {
                onClose.call();
            }));
            bundle.putInt("onError", registerCallback(argsBundle -> {
                onError.call(argsBundle.getString("message"));
            }));
            return bundle;
        }
        private com.example.core.models.Video deserializeVideo(final Bundle value) {
            return com.example.core.models.Video.create(value.getString("uri"), value.getInt("length"), deserializeVideoDescription(value.getBundle("description")));
        }

        private com.example.core.models.VideoDescription deserializeVideoDescription(final Bundle value) {
            return com.example.core.models.VideoDescription.create(value.getInt("lastEdited"), value.getString("author"), value.getString("text"));
        }

        private com.example.core.models.User deserializeUser(final Bundle value) {
            return com.example.core.models.User.create(value.getInt("id"), value.getString("name"), value.getBoolean("isAdmin"));
        }private Bundle serializeUser(final com.example.core.models.User value) {
            final Bundle bundle = new Bundle();
            bundle.putInt("id", value.id());
            bundle.putString("name", value.name());
            bundle.putBoolean("isAdmin", value.isAdmin());
            return bundle;
        }

        private Bundle serializeVideo(final com.example.core.models.Video value) {
            final Bundle bundle = new Bundle();
            bundle.putString("uri", value.uri());
            bundle.putInt("length", value.length());
            bundle.putBundle("description", serializeVideoDescription(value.description()));
            return bundle;
        }

        private Bundle serializeVideoDescription(final com.example.core.models.VideoDescription value) {
            final Bundle bundle = new Bundle();
            bundle.putInt("lastEdited", value.lastEdited());
            bundle.putString("author", value.author());
            bundle.putString("text", value.text());
            return bundle;
        }
    }

    private final ReactRootView mReactRootView;
    private final ReactInstanceManager mReactInstanceManager;
    private final KitchenSinkPropsManager mPropsManager;

    private com.example.core.models.User user;
    private com.example.core.models.Video currentVideo;
    private Fn2args<com.example.core.models.Video, Integer> setVideo;
    private Fn1args<Fn1args<com.example.core.models.Video>> getNextVideo;
    private Fn2args<com.example.core.models.User, Fn1args<com.example.core.models.Video>> getVideoForUser;
    private Fn0args onClose;
    private Fn1args<String> onError;

    public KitchenSink(Activity activity, final com.example.core.models.User user, final com.example.core.models.Video currentVideo, final Fn2args<com.example.core.models.Video, Integer> setVideo, final Fn1args<Fn1args<com.example.core.models.Video>> getNextVideo, final Fn2args<com.example.core.models.User, Fn1args<com.example.core.models.Video>> getVideoForUser, final Fn0args onClose, final Fn1args<String> onError) {
        mReactRootView = new ReactRootView(checkNotNull(activity));
        mReactInstanceManager = ReactInstanceManager.builder()
            .setApplication(checkNotNull(activity.getApplication()))
            .setBundleAssetName("index.android.bundle")
            .setJSMainModuleName("index.android")
            .addPackage(new CodegenPackage())
            .addPackage(new MainReactPackage())
            .setUseDeveloperSupport(BuildConfig.DEBUG)
            .setInitialLifecycleState(LifecycleState.RESUMED)
            .build();

        mPropsManager = new KitchenSinkPropsManager();

        this.user = checkNotNull(user);
        this.currentVideo = checkNotNull(currentVideo);
        this.setVideo = checkNotNull(setVideo);
        this.getNextVideo = checkNotNull(getNextVideo);
        this.getVideoForUser = checkNotNull(getVideoForUser);
        this.onClose = checkNotNull(onClose);
        this.onError = checkNotNull(onError);

        final Bundle initialProps = mPropsManager.createBundle(user, currentVideo, setVideo, getNextVideo, getVideoForUser, onClose, onError);
        mReactRootView.startReactApplication(mReactInstanceManager, "KitchenSink", initialProps);

        mReactInstanceManager.showDevOptionsDialog();
    }

    public View getView() {
        return mReactRootView;
    }

    public void setUser(final com.example.core.models.User user) {
        this.user = checkNotNull(user);
        // TODO(jared): enqueue props flush
    }

    public void setCurrentVideo(final com.example.core.models.Video currentVideo) {
        this.currentVideo = checkNotNull(currentVideo);
        // TODO(jared): enqueue props flush
    }

    public void setSetVideo(final Fn2args<com.example.core.models.Video, Integer> setVideo) {
        this.setVideo = checkNotNull(setVideo);
        // TODO(jared): enqueue props flush
    }

    public void setGetNextVideo(final Fn1args<Fn1args<com.example.core.models.Video>> getNextVideo) {
        this.getNextVideo = checkNotNull(getNextVideo);
        // TODO(jared): enqueue props flush
    }

    public void setGetVideoForUser(final Fn2args<com.example.core.models.User, Fn1args<com.example.core.models.Video>> getVideoForUser) {
        this.getVideoForUser = checkNotNull(getVideoForUser);
        // TODO(jared): enqueue props flush
    }

    public void setOnClose(final Fn0args onClose) {
        this.onClose = checkNotNull(onClose);
        // TODO(jared): enqueue props flush
    }

    public void setOnError(final Fn1args<String> onError) {
        this.onError = checkNotNull(onError);
        // TODO(jared): enqueue props flush
    }

    public void updateProps(final Bundle newProps) {
        WritableNativeMap appParams = new WritableNativeMap();
        appParams.putDouble("rootTag", 1); // HACK(jared): assuming there's only one root tag. could cause crazy problems
        appParams.putMap("initialProps", Arguments.fromBundle(newProps));
        final CatalystInstance catalystInstance = mReactInstanceManager.getCurrentReactContext().getCatalystInstance();
        catalystInstance.getJSModule(AppRegistry.class).runApplication("KitchenSink", appParams);
    }

    public void flush() {
        final Bundle props = mPropsManager.createBundle(user, currentVideo, setVideo, getNextVideo, getVideoForUser, onClose, onError);
        updateProps(props);
    }
}