package org.khanacademy.android.ui.reactnative;

/**
 * This class was AUTO-GENERATED by react-native-codegen, and should not be
 * edited manually. If there is an error, make a change to
 * react-native-codegen. If you want to add another attribute, change the
 * `Props` declaration in "example/Settings.js".
 */



import static com.google.gson.internal.$Gson$Preconditions.checkNotNull;

import org.khanacademy.android.BuildConfig;
import org.khanacademy.codegen.ReactNativePropsManager;

import com.facebook.react.LifecycleState;
import com.facebook.react.ReactInstanceManager;
import com.facebook.react.ReactRootView;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.CatalystInstance;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.shell.MainReactPackage;
import com.facebook.react.uimanager.AppRegistry;

import android.app.Activity;
import android.os.Bundle;
import android.view.View;

final public class Settings {
    public interface Fn0args {
        void call();
    }

    public interface Fn1args<A> {
        void call(A arg);
    }

    public interface Fn2args<A, B> {
        void call(A arg1, B arg2);
    }

    public interface Fn3args<A, B, C> {
        void call(A arg1, B arg2, C arg3);
    }

    public interface Fn4args<A, B, C, D> {
        void call(A arg1, B arg2, C arg3, D arg4);
    }

    private static final class SettingsPropsManager extends ReactNativePropsManager {
        public Bundle createBundle(final boolean shouldShowLogOutButton, final int availableDiskSpaceInBytes, final boolean onlyDownloadOverWifi, final Fn2args<String, Fn1args<Boolean>> checkAnswer, final Fn0args onSignOut, final Fn0args onFeedbackNav, final Fn1args<Boolean> onSetDownloadOverWifi) {
            final Bundle bundle = new Bundle();
            bundle.putBoolean("shouldShowLogOutButton", shouldShowLogOutButton);
            bundle.putInt("availableDiskSpaceInBytes", availableDiskSpaceInBytes);
            bundle.putBoolean("onlyDownloadOverWifi", onlyDownloadOverWifi);
            bundle.putInt("checkAnswer", registerCallback(argsBundle -> {
                checkAnswer.call(argsBundle.getString("answer"), IDK FUnCTION);
            }));
            bundle.putInt("onSignOut", registerCallback(argsBundle -> {
                onSignOut.call();
            }));
            bundle.putInt("onFeedbackNav", registerCallback(argsBundle -> {
                onFeedbackNav.call();
            }));
            bundle.putInt("onSetDownloadOverWifi", registerCallback(argsBundle -> {
                onSetDownloadOverWifi.call(argsBundle.getBoolean("downloadOverWifi"));
            }));
            return bundle;
        }
        
    }

    private final ReactRootView mReactRootView;
    private final ReactInstanceManager mReactInstanceManager;
    private final SettingsPropsManager mPropsManager;

    private boolean shouldShowLogOutButton;
    private int availableDiskSpaceInBytes;
    private boolean onlyDownloadOverWifi;
    private Fn2args<String, Fn1args<Boolean>> checkAnswer;
    private Fn0args onSignOut;
    private Fn0args onFeedbackNav;
    private Fn1args<Boolean> onSetDownloadOverWifi;

    public Settings(Activity activity, final boolean shouldShowLogOutButton, final int availableDiskSpaceInBytes, final boolean onlyDownloadOverWifi, final Fn2args<String, Fn1args<Boolean>> checkAnswer, final Fn0args onSignOut, final Fn0args onFeedbackNav, final Fn1args<Boolean> onSetDownloadOverWifi) {
        mReactRootView = new ReactRootView(checkNotNull(activity));
        mReactInstanceManager = ReactInstanceManager.builder()
            .setApplication(checkNotNull(activity.getApplication()))
            .setBundleAssetName("index.android.bundle")
            .setJSMainModuleName("index.android")
            .addPackage(new CodegenPackage())
            .addPackage(new MainReactPackage())
            .setUseDeveloperSupport(BuildConfig.DEBUG)
            .setInitialLifecycleState(LifecycleState.RESUMED)
            .build();

        mPropsManager = new SettingsPropsManager();

        this.shouldShowLogOutButton = checkNotNull(shouldShowLogOutButton);
        this.availableDiskSpaceInBytes = checkNotNull(availableDiskSpaceInBytes);
        this.onlyDownloadOverWifi = checkNotNull(onlyDownloadOverWifi);
        this.checkAnswer = checkNotNull(checkAnswer);
        this.onSignOut = checkNotNull(onSignOut);
        this.onFeedbackNav = checkNotNull(onFeedbackNav);
        this.onSetDownloadOverWifi = checkNotNull(onSetDownloadOverWifi);

        final Bundle initialProps = mPropsManager.createBundle(shouldShowLogOutButton, availableDiskSpaceInBytes, onlyDownloadOverWifi, checkAnswer, onSignOut, onFeedbackNav, onSetDownloadOverWifi);
        mReactRootView.startReactApplication(mReactInstanceManager, "Settings", initialProps);

        mReactInstanceManager.showDevOptionsDialog();
    }

    public View getView() {
        return mReactRootView;
    }

    public void setShouldShowLogOutButton(final boolean shouldShowLogOutButton) {
        this.shouldShowLogOutButton = checkNotNull(shouldShowLogOutButton);
        // TODO(jared): enqueue props flush
    }

    public void setAvailableDiskSpaceInBytes(final int availableDiskSpaceInBytes) {
        this.availableDiskSpaceInBytes = checkNotNull(availableDiskSpaceInBytes);
        // TODO(jared): enqueue props flush
    }

    public void setOnlyDownloadOverWifi(final boolean onlyDownloadOverWifi) {
        this.onlyDownloadOverWifi = checkNotNull(onlyDownloadOverWifi);
        // TODO(jared): enqueue props flush
    }

    public void setCheckAnswer(final Fn2args<String, Fn1args<Boolean>> checkAnswer) {
        this.checkAnswer = checkNotNull(checkAnswer);
        // TODO(jared): enqueue props flush
    }

    public void setOnSignOut(final Fn0args onSignOut) {
        this.onSignOut = checkNotNull(onSignOut);
        // TODO(jared): enqueue props flush
    }

    public void setOnFeedbackNav(final Fn0args onFeedbackNav) {
        this.onFeedbackNav = checkNotNull(onFeedbackNav);
        // TODO(jared): enqueue props flush
    }

    public void setOnSetDownloadOverWifi(final Fn1args<Boolean> onSetDownloadOverWifi) {
        this.onSetDownloadOverWifi = checkNotNull(onSetDownloadOverWifi);
        // TODO(jared): enqueue props flush
    }

    public void updateProps(final Bundle newProps) {
        WritableNativeMap appParams = new WritableNativeMap();
        appParams.putDouble("rootTag", 1); // HACK(jared): assuming there's only one root tag. could cause crazy problems
        appParams.putMap("initialProps", Arguments.fromBundle(newProps));
        final CatalystInstance catalystInstance = mReactInstanceManager.getCurrentReactContext().getCatalystInstance();
        catalystInstance.getJSModule(AppRegistry.class).runApplication("Settings", appParams);
    }

    public void flush() {
        final Bundle props = mPropsManager.createBundle(shouldShowLogOutButton, availableDiskSpaceInBytes, onlyDownloadOverWifi, checkAnswer, onSignOut, onFeedbackNav, onSetDownloadOverWifi);
        updateProps(props);
    }
}