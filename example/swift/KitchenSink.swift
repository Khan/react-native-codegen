/**
 * This class was AUTO-GENERATED by react-native-codegen, and should not be
 * edited manually. If there is an error, make a change to
 * react-native-codegen. If you want to add another attribute, change the
 * `Props` declaration in "./example/index.js".
 */
public class KitchenSink {

  private let propsManager: KitchenSinkPropsManager
  public let view: RCTRootView

  public var user: User {
    didSet {
      if user != oldValue {
        propsManager.setUser(user)
      }
    }
  }

  public var currentVideo: Video {
    didSet {
      if currentVideo != oldValue {
        propsManager.setCurrentVideo(currentVideo)
      }
    }
  }

  public var setVideo: (video: Video, count: Int) -> Void {
    didSet {
      propsManager.setSetVideo(setVideo)
    }
  }

  public var getNextVideo: (cb: (video: Video) -> Void) -> Void {
    didSet {
      propsManager.setGetNextVideo(getNextVideo)
    }
  }

  public var getVideoForUser: (user: User, cb: (video: Video) -> Void) -> Void {
    didSet {
      propsManager.setGetVideoForUser(getVideoForUser)
    }
  }

  public var onClose: () -> Void {
    didSet {
      propsManager.setOnClose(onClose)
    }
  }

  public var onError: (message: String) -> Void {
    didSet {
      propsManager.setOnError(onError)
    }
  }

  init(user: User, currentVideo: Video, setVideo: (video: Video, count: Int) -> Void, getNextVideo: (cb: (video: Video) -> Void) -> Void, getVideoForUser: (user: User, cb: (video: Video) -> Void) -> Void, onClose: () -> Void, onError: (message: String) -> Void) {
    self.propsManager = KitchenSinkPropsManager(user: user, currentVideo: currentVideo, setVideo: setVideo, getNextVideo: getNextVideo, getVideoForUser: getVideoForUser, onClose: onClose, onError: onError)
    self.user = user
    self.currentVideo = currentVideo
    self.setVideo = setVideo
    self.getNextVideo = getNextVideo
    self.getVideoForUser = getVideoForUser
    self.onClose = onClose
    self.onError = onError
    self.view = ReactNativeBridge.sharedInstance.createRootComponentForModule(
      "KitchenSink", initialProperties: propsManager.serialized)
  }

  required public init?(coder aDecoder: NSCoder) {
    fatalError("init(coder:) has not been implemented")
  }

  /**
   * Re-render the React root view with the current state of the serialized
   * props
   */
  public func flush() {
    dispatch_async(dispatch_get_main_queue()) {
      self.view.appProperties = self.propsManager.serialized
    }
  }
}