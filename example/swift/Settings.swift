/**
 * This class was AUTO-GENERATED by react-native-codegen, and should not be
 * edited manually. If there is an error, make a change to
 * react-native-codegen. If you want to add another attribute, change the
 * `Props` declaration in "example/Settings.js".
 */

public class Settings {

  private class SettingsPropsManager: ReactNativePropsManager {

    init(shouldShowLogOutButton: Bool, availableDiskSpaceInBytes: Int, onlyDownloadOverWifi: Bool, checkAnswer: (answer: String, cb: (isCorrect: Bool) -> Void) -> Void, onSignOut: () -> Void, onFeedbackNav: () -> Void, onSetDownloadOverWifi: (downloadOverWifi: Bool) -> Void) {
      super.init()
      setShouldShowLogOutButton(shouldShowLogOutButton)
        setAvailableDiskSpaceInBytes(availableDiskSpaceInBytes)
        setOnlyDownloadOverWifi(onlyDownloadOverWifi)
        setCheckAnswer(checkAnswer)
        setOnSignOut(onSignOut)
        setOnFeedbackNav(onFeedbackNav)
        setOnSetDownloadOverWifi(onSetDownloadOverWifi)
    }

    public func setShouldShowLogOutButton(shouldShowLogOutButton: Bool) {
    serialized["shouldShowLogOutButton"] = shouldShowLogOutButton
  }

  public func setAvailableDiskSpaceInBytes(availableDiskSpaceInBytes: Int) {
    serialized["availableDiskSpaceInBytes"] = availableDiskSpaceInBytes
  }

  public func setOnlyDownloadOverWifi(onlyDownloadOverWifi: Bool) {
    serialized["onlyDownloadOverWifi"] = onlyDownloadOverWifi
  }

  public func setCheckAnswer(checkAnswer: (answer: String, cb: (isCorrect: Bool) -> Void) -> Void) {
    serialized["checkAnswer"] = registerCallback({args in
      let answer: String = args["answer"]! as! String
      let cb: (isCorrect: Bool) -> Void = {(isCorrect: Bool) in
        let isCorrect_json: Bool = isCorrect
        ReactNativeBridge.sharedInst.callJS(args["cb"]! as! Int, args: ["isCorrect": isCorrect_json])
      }
      checkAnswer(answer: answer, cb: cb)
    })
  }

  public func setOnSignOut(onSignOut: () -> Void) {
    serialized["onSignOut"] = registerCallback({args in
      onSignOut()
    })
  }

  public func setOnFeedbackNav(onFeedbackNav: () -> Void) {
    serialized["onFeedbackNav"] = registerCallback({args in
      onFeedbackNav()
    })
  }

  public func setOnSetDownloadOverWifi(onSetDownloadOverWifi: (downloadOverWifi: Bool) -> Void) {
    serialized["onSetDownloadOverWifi"] = registerCallback({args in
      let downloadOverWifi: Bool = args["downloadOverWifi"]! as! Bool
      onSetDownloadOverWifi(downloadOverWifi: downloadOverWifi)
    })
  }

  }

  private let propsManager: SettingsPropsManager
  public let view: RCTRootView

  public var shouldShowLogOutButton: Bool {
    didSet {
      if shouldShowLogOutButton != oldValue {
        propsManager.setShouldShowLogOutButton(shouldShowLogOutButton)
      }
    }
  }

  public var availableDiskSpaceInBytes: Int {
    didSet {
      if availableDiskSpaceInBytes != oldValue {
        propsManager.setAvailableDiskSpaceInBytes(availableDiskSpaceInBytes)
      }
    }
  }

  public var onlyDownloadOverWifi: Bool {
    didSet {
      if onlyDownloadOverWifi != oldValue {
        propsManager.setOnlyDownloadOverWifi(onlyDownloadOverWifi)
      }
    }
  }

  public var checkAnswer: (answer: String, cb: (isCorrect: Bool) -> Void) -> Void {
    didSet {
      propsManager.setCheckAnswer(checkAnswer)
    }
  }

  public var onSignOut: () -> Void {
    didSet {
      propsManager.setOnSignOut(onSignOut)
    }
  }

  public var onFeedbackNav: () -> Void {
    didSet {
      propsManager.setOnFeedbackNav(onFeedbackNav)
    }
  }

  public var onSetDownloadOverWifi: (downloadOverWifi: Bool) -> Void {
    didSet {
      propsManager.setOnSetDownloadOverWifi(onSetDownloadOverWifi)
    }
  }

  init(shouldShowLogOutButton: Bool, availableDiskSpaceInBytes: Int, onlyDownloadOverWifi: Bool, checkAnswer: (answer: String, cb: (isCorrect: Bool) -> Void) -> Void, onSignOut: () -> Void, onFeedbackNav: () -> Void, onSetDownloadOverWifi: (downloadOverWifi: Bool) -> Void) {
    self.propsManager = SettingsPropsManager(shouldShowLogOutButton: shouldShowLogOutButton, availableDiskSpaceInBytes: availableDiskSpaceInBytes, onlyDownloadOverWifi: onlyDownloadOverWifi, checkAnswer: checkAnswer, onSignOut: onSignOut, onFeedbackNav: onFeedbackNav, onSetDownloadOverWifi: onSetDownloadOverWifi)
    self.shouldShowLogOutButton = shouldShowLogOutButton
    self.availableDiskSpaceInBytes = availableDiskSpaceInBytes
    self.onlyDownloadOverWifi = onlyDownloadOverWifi
    self.checkAnswer = checkAnswer
    self.onSignOut = onSignOut
    self.onFeedbackNav = onFeedbackNav
    self.onSetDownloadOverWifi = onSetDownloadOverWifi
    self.view = ReactNativeBridge.sharedInstance.createRootComponentForModule(
      "Settings", initialProperties: propsManager.serialized)
  }

  required public init?(coder aDecoder: NSCoder) {
    fatalError("init(coder:) has not been implemented")
  }

  /**
   * Re-render the React root view with the current state of the serialized
   * props
   */
  public func flush() {
    dispatch_async(dispatch_get_main_queue()) {
      self.view.appProperties = self.propsManager.serialized
    }
  }
}