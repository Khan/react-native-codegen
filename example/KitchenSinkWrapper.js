/**
 * This class was AUTO-GENERATED by react-native-codegen, and should not be
 * edited manually. If there is an error, make a change to
 * react-native-codegen. If you want to add another attribute, change the
 * `Props` declaration in "example/index.js".
 */

import React from "react-native";
import {ReactNativeCallbackManager} from "react-native-codegen";

import WrappedComponent from "./index.js";

import type {Video, User} from "./index.js";

type Props = {
    user: User
    currentVideo: Video
    setVideo: number
    getNextVideo: number
    getVideoForUser: number
    onClose: number
    onError: number
}

class KitchenSinkWrapper extends React.Component {
    props: Props;

    constructor(props) {
        super(props);
        this.callbackIds = [];
    }
    registerCallback(cb: Function) {
        const id = ReactNativeCallbackManager.registerCallback(cb);
        this.callbackIds.push(id);
        return id;
    }
    componentWillUnmount() {
        ReactNativeCallbackManager.unregisterCallbacks(this.callbackIds);
    }
    render() {
        return (
            <WrappedComponent
                user={this.props.user}
                currentVideo={this.props.currentVideo}
                setVideo={(video: Video, count: number) => {
                    ReactNativeCallbackManager.callNative(this.props.setVideo, {video: video, count: count});
                }}
                getNextVideo={(cb: (video: Video) => void) => {
                    ReactNativeCallbackManager.callNative(this.props.getNextVideo, {cb: this.registerCallback(({video}) => {
                        cb(video: video);
                    })});
                }}
                getVideoForUser={(user: User, cb: (video: Video) => void) => {
                    ReactNativeCallbackManager.callNative(this.props.getVideoForUser, {user: user, cb: this.registerCallback(({video}) => {
                        cb(video: video);
                    })});
                }}
                onClose={() => {
                    ReactNativeCallbackManager.callNative(this.props.onClose, {});
                }}
                onError={(message: string) => {
                    ReactNativeCallbackManager.callNative(this.props.onError, {message: message});
                }}
            />
        );
    }
}

export default KitchenSinkWrapper